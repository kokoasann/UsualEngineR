#include "PreCompile.h"
#include "Level.h"
#include "MapChip.h"

using namespace std;
namespace UER
{
	Level::Level()
	{
	}
	Level::~Level()
	{
	}

	void Level::Init(const char* levelDataFilePath, Level::HookWhenBuildObjectFunc hookFunc)
	{
		//スケルトンをロードする。
		Skeleton skeleton;
		skeleton.Init(levelDataFilePath);
		//構築構築。
		//0番目はルートオブジェクトなので飛ばす。
		for (auto i = 1; i < skeleton.GetNumBones(); i++) {
			//骨を取得。
			auto bone = skeleton.GetBone(i);
			if (bone->GetNo() == 0) {	//親がルートの場合だけマップチップを生成する。
				LevelObjectData objData;
				Vector3 scale;
				bone->CalcWorldTRS(objData.position, objData.rotation, objData.scale);
				//3dsMaxとは軸が違うので、補正を入れる。
				auto t = objData.position.y;
				objData.position.y = objData.position.z;
				objData.position.z = -t;

				t = objData.rotation.y;
				objData.rotation.y = objData.rotation.z;
				objData.rotation.z = -t;
				objData.name = bone->GetName();
				bool isHook = false;
				if (hookFunc != nullptr) {
					//hook関数が指定されているのでhook関数を呼び出す。
					isHook = hookFunc(objData);
				}
				if (isHook == false) {
					//フックされなかったので、マップチップを作成する。
					auto mapChip = std::make_unique<MapChip>(objData);
					m_mapChipArray.push_back(std::move(mapChip));
				}
			}
		}
	}
	void Level::Draw()
	{
		for (auto& mapChip : m_mapChipArray) {
			mapChip->Draw();
		}
	}
}